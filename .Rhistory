View(fitted_models)
models_tbl <- modeltime_table(
fitted_models$prophet,
fitted_models$arima
)
mods <- list(
arima = arima_reg() |> set_engine("auto_arima"),
prophet = prophet_reg() |> set_engine("prophet"))
fitted_models <- mods %>%
map(~ fit(.x, Flow ~ Date, data = training(splits)))
models_tbl <- modeltime_table(
fitted_models$prophet,
fitted_models$arima
)
alibration_tbl <- models_tbl %>%
modeltime_calibrate(models_tbl, testing, quiet= FALSE, testing(splits))
calibration_tbl <- models_tbl %>%
modeltime_calibrate(new_data = testing(splits), quiet = FALSE)
forecast_tbl <- calibration_tbl %>%
modeltime_forecast(
new_data = testing(splits),
actual_data = poudre_flow)
forecast<- forecast_tbl %>%
plot_modeltime_forecast(
.interactive = FALSE,
.conf_interval_show = TRUE
)
#plot it
plot_modeltime_forecast(forecast)
calibration_tbl %>%
modeltime_forecast(
new_data = testing(splits),
actual_data = poudre_tsibble
) %>%
plot_modeltime_forecast()
# Define start and end dates
start_date <- Sys.Date()
end_date <- start_date %m+% months(12)
# Download daily flow data for the next 12 months
poudre_future_flow <- readNWISdv(
siteNumber = "06752260",
parameterCd = "00060",
startDate = start_date,
endDate = end_date
) %>%
renameNWISColumns() %>%
mutate(Date = as.Date(Date)) %>%                  # Ensure Date is in Date format
mutate(Date = yearmonth(Date)) %>%                # Convert to year-month format
group_by(Date) %>%
summarise(Flow = mean(Flow, na.rm = TRUE))        # Monthly average flow
start_date <- Sys.Date()
end_date <- start_date %m+% months(12)
poudre_future_flow <- readNWISdv(siteNumber = "06752260",    # Download data from USGS for site 06752260
parameterCd = "00060",      # Parameter code 00060 = discharge in cfs)
startDate = start_date,   # Set the start date
endDate = end_date )|>  # Set the end date
renameNWISColumns() |>                              # Rename columns to standard names (e.g., "Flow", "Date")
mutate(Date = yearmonth(Date)) |>                   # Convert daily Date values into a year-month format (e.g., "2023 Jan")
group_by(Date) |>                                   # Group the data by the new monthly Date
summarise(Flow = mean(Flow))
poudre_future_flow <- readNWISdv(
siteNumbers = "06752260",     # USGS site number
parameterCd = "00060",        # Discharge in cfs
startDate = start_date,
endDate = end_date
) %>%
renameNWISColumns() %>%
mutate(Date = as.Date(Date)) %>%         # Make sure Date is actual Date format
mutate(Date = yearmonth(Date)) %>%       # Convert daily dates to monthly
group_by(Date) %>%
summarise(Flow = mean(Flow, na.rm = TRUE))  # Mo
names(poudre_future_raw)
View(poudre_flow)
poudre_flow_12 <- readNWISdv(siteNumber = "06752260",    # Download data from USGS for site 06752260
parameterCd = "00060",      # Parameter code 00060 = discharge in cfs)
startDate = "2023-12-31",   # Set the start date
endDate = "2024-12-31") |>  # Set the end date
renameNWISColumns() |>                              # Rename columns to standard names (e.g., "Flow", "Date")
mutate(Date = yearmonth(Date)) |>                   # Convert daily Date values into a year-month format (e.g., "2023 Jan")
group_by(Date) |>                                   # Group the data by the new monthly Date
summarise(Flow = mean(Flow))
# Example: Cache la Poudre River at Mouth (USGS site 06752260)
poudre_future_flow <- readNWISdv(siteNumber = "06752260",    # Download data from USGS for site 06752260
parameterCd = "00060",      # Parameter code 00060 = discharge in cfs)
startDate = start_date,   # Set the start date
endDate = end_date )|>  # Set the end date
renameNWISColumns() |>                              # Rename columns to standard names (e.g., "Flow", "Date")
mutate(Date = yearmonth(Date)) |>                   # Convert daily Date values into a year-month format (e.g., "2023 Jan")
group_by(Date) |>                                   # Group the data by the new monthly Date
summarise(Flow = mean(Flow))                       # Calculate the average daily flow for each month
View(poudre_flow_12)
forecast_tbl1 <- calibration_tbl %>%
modeltime_forecast(
new_data = testing(splits),
actual_data = poudre_flow_12)
poudre_flow1 <- poudre_flow1 %>%
mutate(Date = as.Date(Date)) %>%
arrange(Date)
poudre_flow_12 <- poudre_flow_12 %>%
mutate(Date = as.Date(Date)) %>%
arrange(Date)
splits1 <- time_series_split(
data = poudre_flow_12,
date_var = Date,
assess = "12 months",
cumulative = TRUE)
install.packages("sf")
install.packages("terra")
install.packages("mapview")
remotes::install_github("mikejohnson51/AOI")
install.packages("remotes")
remotes::install_github("mikejohnson51/AOI")
sf::sf_extSoftVersion()
terra::gdal()
library(readr)
#read in cities csv.
cities <- read_csv("data/uscities.csv")
glimpse(cities)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
glimpse(cities)
library(sf) #needed for spatial objects
cities_sf <- st_as_sf(cities,
coords = c("lng", "lat"),
crs = 4326)  # EPSG:4326 is the standard for lat/lon (WGS84)
plot(st_geometry(cities_sf))
cities_sf <- st_as_sf(cities,
coords = c("lng", "lat"),
crs = 5070)  # EPSG:5070 = NAD83 / Conus Albers
plot(st_geometry(cities_sf))
library(AOI)
# Get Larimer County boundary
larimer <- aoi_get(state = "CO", county = "Larimer")
cities_sf <- st_as_sf(cities, coords = c("lng", "lat"), crs = 4326)
cities_sf <- st_transform(cities_sf, 5070)# EPSG:5070 = NAD83 / Conus Albers
# Reproject to EPSG:5070
larimer <- st_transform(larimer, 5070)
View(cities_sf)
#filter cities within Larimer county
cities_larimer <- st_filter(cities_sf, larimer)
top3 <- cities_larimer %>%
arrange(desc(population)) %>%
slice_head(n = 3)
View(top3)
ggplot() +
geom_sf(data = larimer, fill = NA, color = "black", size = 1) +
geom_sf(data = cities_larimer, color = "blue", size = 2) +
geom_sf(data = top3, color = "red", size = 4) +
ggtitle("Top 3 Most Populated Cities in Larimer County (EPSG:5070)") +
theme_minimal()
View(top3)
View(top3)
ggplot() +
geom_sf(data = larimer, fill = NA, color = "black", size = 1) +
geom_sf(data = cities_larimer, color = "blue", size = 2) +
geom_sf(data = top3, color = "density", size = 4) +
ggtitle("Top 3 Most Populated Cities in Larimer County (EPSG:5070)") +
theme_minimal()
ggplot() +
geom_sf(data = larimer, fill = NA, color = "black", size = 1) +
geom_sf(data = cities_larimer, color = "blue", size = 2) +
geom_sf(data = top3, color = density, size = 4) +
ggtitle("Top 3 Most Populated Cities in Larimer County (EPSG:5070)") +
theme_minimal()
ggplot() +
geom_sf(data = larimer, fill = NA, color = "black", size = 1) +
geom_sf(data = cities_larimer, color = "blue", size = 2) +
geom_sf(data = top3, color = "red", size = 4) +
ggtitle("Top 3 Most Populated Cities in Larimer County (EPSG:5070)") +
theme_minimal()
install.packages("ggrepel")
library(ggrepel)
ggrepel::geom_label_repel(
data = top3,
aes(label = city, geometry = geometry),
stat = "sf_coordinates",
size = 3)
View(top3)
View(top3)
cities <- read_csv("data/uscities.csv")
glimpse(cities)
#values ini decimal degrees and have lat/lon-->wgs84 or 4326
# Convert to an sf object using longitude (lng) and latitude (lat)
# Convert to sf and set original CRS to 4326, then reproject to 5070
cities_sf <- st_as_sf(cities, coords = c("lng", "lat"), crs = 4326)
cities_sf <- st_transform(cities_sf, 5070)# EPSG:5070 = NAD83 / Conus Albers
# Check the result
plot(st_geometry(cities_sf))
# Get Larimer County boundary
larimer <- aoi_get(state = "CO", county = "Larimer")
# Reproject to EPSG:5070
larimer <- st_transform(larimer, 5070)
#filter cities within Larimer county
cities_larimer <- st_filter(cities_sf, larimer)
#find top 3 cities in larimer using slice. Make ggplot with it
top3 <- cities_larimer %>%
arrange(desc(population)) %>%
slice_head(n = 3)
ggplot() +
geom_sf(data = larimer, fill = NA, color = "black", size = 1) +
geom_sf(data = cities_larimer, color = "blue", size = 2) +
geom_sf(data = top3, color = "red", size = 4) +
ggtitle("Top 3 Most Populated Cities in Larimer County (EPSG:5070)") +
theme_minimal()
#geom_label_repel() is similar to geom_label
#hint: specify the label argument to the name of the city &the geometry argument to the geometry column of you sf object.
#hint:set the stat argument to sf_coordinates so the function knows to use the coordinates of the geometry column for the label positions.
# Add labels to the cities
ggrepel::geom_label_repel(
data = top3,
aes(label = city, geometry = geometry),
stat = "sf_coordinates",
size = 3)
ggplot() +
geom_sf(data = larimer, fill = NA, color = "black") +
geom_sf(data = top3, color = "red", size = 4) +
ggrepel::geom_label_repel(
data = top3,
aes(label = city, geometry = geometry),
stat = "sf_coordinates",
size = 3
)
ggrepel::geom_label_repel(
data = top3,
aes(label = city, geometry = geometry),
stat = "sf_coordinates",
size = 3,
min.segment.length = 0
) +
coord_sf(datum = NA)
ggplot() +
geom_sf(data = larimer, fill = NA, color = "black") +
geom_sf(data = cities_larimer, color = "blue", size = 2) +   # all cities
geom_sf(data = top3, color = "red", size = 4) +              # highlight top 3
ggrepel::geom_label_repel(
data = top3,
aes(label = city, geometry = geometry),
stat = "sf_coordinates",
size = 3,
min.segment.length = 0
) +
coord_sf(datum = NA)
ggplot() +
geom_sf(data = larimer, fill = NA, color = "black") +
geom_sf(data = cities_larimer, color = "blue", size = 2) +   # all cities
geom_sf(data = top3, color = "red", size = 4) +              # highlight top 3
ggrepel::geom_label_repel(
data = top3,
aes(label = city, geometry = geometry),
stat = "sf_coordinates",
size = 3,
min.segment.length = 0
) +
coord_sf(datum = NA) +  # Keeps full extent without clipping labels
ggtitle("Cities in Larimer County with Top 3 Labeled") +
theme_minimal()
ggplot() +
geom_sf(data = larimer, fill = NA, color = "black", size = 1) +
geom_sf(data = cities_larimer, color = "blue", size = 1) +
geom_sf(data = top3, color = "red", size = 3) +
ggtitle("Top 3 Most Populated Cities in Larimer County (EPSG:5070)") +
theme_minimal()
ggrepel::geom_label_repel(
data = top3,
aes(label = city, geometry = geometry),
stat = "sf_coordinates",
size = 3)
ggrepel::geom_label_repel(
data = top3,
aes(label = city, geometry = geometry),
stat = "sf_coordinates",
size = 3) +
coord_sf(datum = NA) +
ggtitle("Cities in Larimer County with Top 3 Labeled")
ggplot() +
geom_sf(data = larimer, fill = NA, color = "black", size = 1) +
geom_sf(data = cities_larimer, color = "blue", size = 1) +
geom_sf(data = top3, color = "red", size = 3) +
ggtitle("Top 3 Most Populated Cities in Larimer County (EPSG:5070)") +ggrepel::geom_label_repel(
data = top3,
aes(label = city, geometry = geometry),
stat = "sf_coordinates",
size = 3) +
coord_sf(datum = NA) +
ggtitle("Cities in Larimer County with Top 3 Labeled")
theme_minimal()
ggplot() +
geom_sf(data = larimer, fill = NA, color = "black", size = 1) +
geom_sf(data = cities_larimer, color = "blue", size = 1) +
geom_sf(data = top3, color = "red", size = 3) +
ggrepel::geom_label_repel(
data = top3,
aes(label = city, geometry = geometry),
stat = "sf_coordinates",
size = 3) +
coord_sf(datum = NA) +
ggtitle("Top 3 cities in Larimer County")
theme_minimal()
ggplot() +
geom_sf(data = larimer, fill = NA, color = "black") +
geom_sf(data = cities_larimer, color = "blue", size = 1) +   # all cities
geom_sf(data = top3, color = "red", size = 3) +              # highlight top 3
ggrepel::geom_label_repel(
data = top3,
aes(label = city, geometry = geometry),
stat = "sf_coordinates",
size = 2,
) +
coord_sf(datum = NA) +  # Keeps full extent without clipping labels
ggtitle("Top 3 populated cities in Larimer County") +
theme_minimal()
final_plot <- ggplot() +
geom_sf(data = larimer, fill = NA, color = "black") +
geom_sf(data = cities_larimer, color = "blue", size = 1) +   # all cities
geom_sf(data = top3, color = "red", size = 3) +              # highlight top 3
ggrepel::geom_label_repel(
data = top3,
aes(label = city, geometry = geometry),
stat = "sf_coordinates",
size = 2,
) +
coord_sf(datum = NA) +  # Keeps full extent without clipping labels
ggtitle("Top 3 populated cities in Larimer County") +
theme_minimal()
print(final_plot)
#Save the plot as a PNG
ggsave("imgs/larimer_county_map.png", plot = final_plot, width = 8, height = 6, dpi = 300)
library(tidyverse)
library(sf)
library(AOI)
library(ggrepel)
library(readr)
library(tidyverse)
library(sf)
library(AOI)
library(ggrepel)
library(readr)
library(tigris)
library(tmap)
rivers <- read_sf("C:/Users/samho/Desktop/ESS330/github/daily-assignments/data/majorrivers_0_0/MajorRivers.shp")
View(rivers)
# Preview the data
plot(rivers["NAME"])
str(rivers)
miss_river <- rivers %>%
filter(SYSTEM == "Mississippi")
# Get all county boundaries in CONUS
counties <- AOI::aoi_get(state = "conus", admin = "county")
# Get all county boundaries in CONUS
# Get all states in CONUS (excluding Alaska, Hawaii, etc.)
states_conus <- AOI::aoi_get(state = AOI::conus)
conus_states <- aoi_get(state = c(
"Alabama", "Arizona", "Arkansas", "California", "Colorado", "Connecticut",
"Delaware", "Florida", "Georgia", "Idaho", "Illinois", "Indiana", "Iowa",
"Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts",
"Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska",
"Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York",
"North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon",
"Pennsylvania", "Rhode Island", "South Carolina", "South Dakota",
"Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington",
"West Virginia", "Wisconsin", "Wyoming"
))
# Get all counties (you could also loop over states if needed)
all_counties <- counties(cb = TRUE, year = 2020, class = "sf")
# Transform CRS to match conus_states
all_counties <- st_transform(all_counties, st_crs(conus_states))
# Filter counties that intersect the Mississippi River system
counties_miss <- st_filter(conus_counties, miss_river, .predicate = st_intersects)
conus_counties <- all_counties[st_intersects(all_counties, conus_states, sparse = FALSE), ]
all_counties <- purrr::map_df(state_abbrevs, ~ tigris::counties(state = .x, cb = TRUE, year = 2020, class = "sf"))
# Convert to state abbreviations using base R
state_abbrevs <- state.abb[match(conus_states$state, state.name)]
View(conus_states)
# Pull counties for each state and combine
all_counties <- purrr::map_df(state_abbrevs, ~ tigris::counties(state = .x, cb = TRUE, year = 2020, class = "sf"))
# Filter counties that intersect the Mississippi River system
# Use st_filter to get counties intersecting the Mississippi River system
counties_miss <- st_filter(all_counties, miss_river, .predicate = st_intersects)
# Convert all_counties to sf object if it's not already
all_counties_sf <- st_as_sf(all_counties)
# Get all counties (you could also loop over states if needed)
all_counties <- counties(cb = TRUE, year = 2020, class = "sf")
View(all_counties)
# Transform the CRS of counties to match the CRS of the Mississippi River system
all_counties_sf <- st_transform(all_counties, st_crs(miss_river))
conus_counties <- all_counties[st_intersects(all_counties, conus_states, sparse = FALSE), ]
# Transform conus_states CRS to match the CRS of all_counties
conus_states_sf <- st_transform(conus_states, st_crs(all_counties))
conus_counties <- all_counties[st_intersects(all_counties, conus_states_sf, sparse = FALSE), ]
all_counties <- purrr::map_df(state_abbrevs, ~ tigris::counties(state = .x, cb = TRUE, year = 2020, class = "sf"))
# Assuming miss_river has the correct CRS
all_counties <- st_transform(all_counties, st_crs(miss_river))
all_counties <- purrr::map_df(state_abbrevs, ~ tigris::counties(state = .x, cb = TRUE, year = 2020, class = "sf"))
# Check the class of all_counties to confirm it is an sf object
class(all_counties)  # Should return "sf", if not, we need to convert
# If it's not already an sf object, convert it
if (!inherits(all_counties, "sf")) {
all_counties <- st_as_sf(all_counties)
}
View(all_counties)
all_counties <- purrr::map_df(state_abbrevs, ~ tigris::counties(state = .x, cb = TRUE, year = 2020, class = "sf"))
# List of state abbreviations for the contiguous U.S.
state_abbrevs <- state.abb[!state.abb %in% c("AK", "HI")]
# Try fetching counties for all states and combine
all_counties <- purrr::map_df(state_abbrevs, function(state) {
counties_data <- tryCatch(
{
tigris::counties(state = state, cb = TRUE, year = 2020, class = "sf")
},
error = function(e) {
message(paste("Error fetching data for state:", state))
NULL  # Return NULL if there's an error
}
)
all_counties <- purrr::map_df(state_abbrevs, function(state) {
counties_data <- tryCatch(
{
tigris::counties(state = state, cb = TRUE, year = 2020, class = "sf")
},
error = function(e) {
message(paste("Error fetching data for state:", state))
NULL  # Return NULL if there's an error
})
View(all_counties)
# Get counties for the contiguous U.S.
conus_counties <- AOI::aoi_get(state = AOI::aoi_states(exclude = c("AK", "HI")), type = "county")
options(tigris_use_cache = FALSE)
conus_counties <- counties(cb = TRUE, year = 2020, class = "sf")
View(conus_counties)
conus_counties <- st_transform(conus_counties, st_crs(miss_river))
counties_miss <- st_filter(conus_counties, miss_river, .predicate = st_intersects)
#map
tmap_mode("plot")
tm_shape(conus_counties) +
tm_borders(col = "lightgray") +
tm_shape(counties_miss) +
tm_fill(col = "steelblue", alpha = 0.6, title = "Intersecting Counties") +
tm_shape(miss_river) +
tm_lines(col = "darkblue", lwd = 1.2) +
tm_layout(title = "Counties Intersecting Mississippi River System")
cities <- read_csv("data/uscities.csv")
cities <- st_transform(cities, st_crs(counties_miss))
st_crs(counties_miss)
#transform crs to albers equal area
miss_river <- st_transform(miss_river, 5070)
conus_counties <- st_transform(conus_counties, 5070)
cities_sf <- st_as_sf(cities, coords = c("lng", "lat"), crs = 4326)
cities_sf <- st_transform(cities_sf, 5070)# EPSG:5070 = NAD83 / Conus Albers
counties_miss <- st_filter(conus_counties, miss_river, .predicate = st_intersects)
cities_miss <- st_join(cities_sf, counties_miss, join = st_intersects, left = FALSE)
View(cities_miss)
urban_pop_by_county <- cities_miss %>%
group_by(county_name) %>%              # or use COUNTYFP or NAME depending on what column exists
summarise(urban_pop = sum(population, na.rm = TRUE))
View(urban_pop_by_county)
View(counties_miss)
urban_pop_by_county <- cities_miss %>%
group_by(GEOID) %>%              # or use COUNTYFP or NAME depending on what column exists
summarise(urban_pop = sum(population, na.rm = TRUE))
counties_miss_pop <- counties_miss %>%
left_join(urban_pop_by_county, by = "GEOID")
#drop geometry to join the table
urban_pop_by_county_df <- st_drop_geometry(urban_pop_by_county)
View(urban_pop_by_county_df)
View(urban_pop_by_county)
library(tmap)
View(rivers)
class(counties_miss)
class(urban_pop_by_county_df)
class(urban_pop_by_county_sf)
View(urban_pop_by_county_df)
# Check the class of urban_pop_by_county_df
class(urban_pop_by_county_df)
library(ggpubr)
library(raster)
library(tidyverse)
library(readr)
url <- 'https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/foco-elev-cm.tif'
library(terra)
library(glue)
print(url)
url <- '/vsicurl/https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/main/resources/foco-elev-cm.tif'
r <- terra::rast(url)
View(r)
print(r)
#  x and y units are in meters, not the elevation values. convert elev from cm-->ft
r_ft <- r * 0.0328084
#gives you a data frame with each row representing a raster cell and its corresponding elevation in feet.
df <- terra::values(r_ft, dataframe = TRUE)
head(df)
ggdensity(df, x = names(df),      # Use the column of elevation values
fill = "lightblue",     # Fill color for the density curve
color = "black",        # Border color of the curve
add = "mean",           # Add a vertical line for the mean
rug = TRUE) +           # Add a rug plot (ticks) along the x-axis
labs(title = "Elevation Density Plot",   # Plot title
x = "Elevation (feet)",             # X-axis label
y = "Density") +                    # Y-axis label
theme_pubr()                             # Apply a clean ggpubr theme
# Create a density plot using ggpubr
p <- ggdensity(df, x = names(df),      # Use the column of elevation values
fill = "lightblue",     # Fill color for the density curve
color = "black",        # Border color of the curve
add = "mean",           # Add a vertical line for the mean
rug = TRUE) +           # Add a rug plot (ticks) along the x-axis
labs(title = "Elevation Density Plot",   # Plot title
x = "Elevation (feet)",             # X-axis label
y = "Density") +                    # Y-axis label
theme_pubr()                             # Apply a clean ggpubr theme
# Save plot as PNG
ggsave("elevation_density.png", plot = p, width = 6, height = 4, dpi = 300)
