#read in the COVID-19 data from the URL
library(tidyverse)
url = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv'
covid = read_csv(url)
head(covid, 5)
?tidyverse
covid<- covid %>%
mutate(date = as.Date(date)) %>%  # Ensure date is in proper Date format
filter(date == max(date))
View(covid)
top_6_states <- covid |>
arrange(desc(cases)) |> #arrange from most to least cases
slice_head(n = 6) |> #show top 6
pull(state)
covid_filtered <- covid |>
filter(state %in% top_6_states)
View(covid_filtered)
ggplot(covid_filtered, aes(x = date, y = cases, color = state, group = state)) +
geom_line() +  # Create a line plot
labs(title = "COVID-19 Cases in the Top 6 States",
x = "Date",
y = "Number of Cases") +
facet_wrap(~ state, scales = "free_y") +  # Facet by state
theme_minimal()
ggplot(covid_filtered, aes(x = date, y = cases, color = state, group = state)) +
geom_line() +  # Create a line plot
labs(title = "COVID-19 Cases in the Top 6 States",
x = "Date",
y = "Number of Cases") +
facet_grid(~ state, scales = "free_y") +  # Facet by state
theme_minimal()
View(covid)
ggsave("img/covid_cases_top_6_states.png", width = 10, height = 6)
ggsave("imgs/covid_cases_top_6_states.png", width = 10, units = 6)
ggsave("imgs/covid_cases_top_6_states.png", width = 10, height = 6)
ggplot(covid_filtered, aes(x = date, y = cases, color = state, group = state)) +
geom_line() +  # Create a line plot
labs(title = "COVID-19 Cases in the Top 6 States",
x = "Date",
y = "Number of Cases") +
facet_grid(~ state, scales = "free_y") +  # Facet by state
theme_minimal()  # Use a clean theme
top_6_states<-covid %>%
filter(date == max(date)) %>%
group_by(state) %>%
summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
arrange(desc(total_cases)) %>%
slice(1:6) |>
pull(state)
print(top_6_states)
top_6_states<-covid %>%
filter(date == max(date)) %>%
group_by(state) %>%
summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
arrange(desc(total_cases)) %>%
slice(1:6)
View(top_6_states)
covid_filtered <- covid |>
filter(state %in% top_6_states)
View(covid_filtered)
covid<- covid %>%
mutate(date = as.Date(date)) %>%  # Ensure date is in proper Date format
filter(date == max(date))  # Filter for the most recent data with max
top_6_states <- covid |>
arrange(desc(cases)) |> #arrange from most to least cases
slice_head(n = 6) |> #show top 6
pull(state)
covid_filtered <- covid |>
filter(state %in% top_6_states)
ggplot2(top_6_states, aes(x = date, y = cases, color = state, group = state)) +
geom_line() +  # Create a line plot
labs(title = "COVID-19 Cases in the Top 6 States",
x = "Date",
y = "Number of Cases") +
facet_grid(~ state) +  # Facet by state
theme_minimal()
library(tidyverse)
url = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv'
covid = read_csv(url)
head(covid, 5)
top_6_state<- covid %>%
filter(date == max(date)) %>%
group_by(state) %>%
summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
arrange(desc(total_cases)) %>%
slice(1:6)
library(tidyverse)
url = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv'
covid = read_csv(url)
top_6_state<- covid %>%
filter(date == max(date)) %>%
group_by(state) %>%
summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
arrange(desc(total_cases)) %>%
slice(1:6)
View(top_6_state)
library(tidyverse)
url = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv'
covid = read_csv(url)
head(covid, 5)
library(tidyverse)
url = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv'
covid = read_csv(url)
head(covid, 5)
top_6_states <- covid %>%
filter(date==max(date)) %>%
arrange(desc(cases)) %>%
slice_head(n = 6) %>%
pull(state)
covid_data_filtered <- covid %>%
filter(state %in% top_6_states)
View(covid_data_filtered)
View(covid_data_filtered)
ggplot(covid_data_filtered, aes(x = date, y = cases, color = state, group = state)) +
geom_line() +  # Add a line plot layer
labs(title = "COVID-19 Cases in the Top 6 States",
x = "Date",
y = "Number of Cases") +
facet_wrap(~ state, scales = "free_y") +  # Facet by state, free y-axis scales
theme_minimal() +  # Clean theme
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate X-axis labels
ggplot(covid_data_filtered, aes(x = date, y = cases, color = state)) +
geom_smooth(method = "loess", se = FALSE) +  # Adds a smooth trend line (loess method)
labs(title = "Trend of COVID-19 Cases in the Top 6 States",
x = "Date",
y = "Number of Cases") +
facet_wrap(~ state, scales = "free_y") +  # Facet by state, with free y-scales
theme_minimal() +  # Clean theme
theme(axis.text.x = element_text(angle = 45, hjust = 1))
covid$date <- as.Date(covid_data$date)
covid$date <- as.Date(covid$date)  #change the date format to make easier
covid$date <- as.Date(covid$date)  #change the date format to make easier
daily_total_cases <- covid %>%
group_by(date) %>%  # Group by date, allows to group cases by day
summarize(total_cases = sum(cases, na.rm = TRUE))
View(daily_total_cases)
ggplot(daily_total_cases, aes(x = date, y = total_cases)) +
geom_col(fill = "red") +  # Create the column plot with skyblue bars
labs(title = "Daily Total COVID-19 Cases in the USA",
x = "Date",
y = "Total Cases") +
theme_minimal() +  # Clean theme
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
ggplot(daily_total_cases, aes(x = date, y = total_cases)) +
geom_col(fill = "red",alpha=.5) +
geom_smooth(method = "loess", se = FALSE, color = "red", size = 1) +# Create the column plot with skyblue bars
labs(title = "Daily Total COVID-19 Cases in the USA",
x = "Date",
y = "Total Cases") +
theme_minimal() +
ggplot(daily_total_cases, aes(x = date, y = total_cases)) +
geom_col(fill = "red",alpha=.5) +
geom_smooth(method = "loess", se = FALSE, color = "red", size = 1) +# Create the column plot with skyblue bars
labs(title = "Daily Total COVID-19 Cases in the USA",
x = "Date",
y = "Total Cases") +
theme_minimal() +  # Clean theme
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(covid)
min(covid$date)
max(covid$date)
max(covid$cases)
ggsave("imgs/daily_total_cases_with_trend.png", width = 10, height = 6)
library(tidyverse)
url = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv'
covid = read_csv(url)
top_6_states <- covid %>% #taking covid data and filtering for the max date
filter(date==max(date)) %>%
arrange(desc(cases)) %>% #arranging from most to least cases
slice_head(n = 6)
#read in the COVID-19 data from the URL
library(tidyverse)
url = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv'
covid = read_csv(url)
head(covid, 5)
##Make a faceted line plot (geom_line) of the 6** states with most cases. Your X axis should be the date and the y axis cases.**
#step 1. Identify the six states with the most current cases (yesterdays assignment + dplyr::pull)
#step 2. Filter the raw data to those 6 states (hint: %in%)
#step 3. Set up a ggplot –> add layers –> add labels –> add a facet –> add a theme
#step4. save the image to you img directory (hint: ggsave())
top_6_states <- covid %>% #taking covid data and filtering for the max date
filter(date==max(date)) %>%
arrange(desc(cases)) %>% #arranging from most to least cases
slice_head(n = 6) %>% #showing the top 6 rows
pull(state) #pulling the state names from those rows
covid_data_filtered <- covid %>%   #taking data from the states that= the anmes of the 6 states
filter(state %in% top_6_states)
ggplot(covid_data_filtered, aes(x = date, y = cases, color = state)) +
geom_smooth(method = "loess", se = FALSE) +  # Adds a smooth trend line (loess method)
labs(title = "Trend of COVID-19 Cases in the Top 6 States",
x = "Date",
y = "Number of Cases") +
facet_wrap(~ state, scales = "free_y") +  # Facet by state, with free y-scales
theme_minimal() +  # Clean theme
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
##Make a column plot (geom_col) of daily total cases in the USA. Your X axis should be the date and the y axis cases.
#We can break this task into 3 steps:
#1.Identify the total cases each day in the whole country (hint: group_by(date))
#2. Set up a ggplot –> add layers –> add labels –> add a theme
#3. Save the image to your img directory (hint: ggsave())
covid$date <- as.Date(covid$date)  #change the date format to make easier
# Group by date and calculate the total cases for each day
daily_total_cases <- covid %>%
group_by(date) %>%  # Group by date, allows to group cases by day
summarize(total_cases = sum(cases, na.rm = TRUE)) #This sums up the cases column for each date
View(covid_data_filtered)
View(daily_total_cases)
ggplot(daily_total_cases, aes(x = date, y = total_cases)) +
geom_col(fill = "red",alpha=.5) +
geom_smooth(method = "loess", se = FALSE, color = "red", size = 1) +# Create the column plot with skyblue bars
labs(title = "Daily Total COVID-19 Cases in the USA",
x = "Date",
y = "Total Cases") +
theme_minimal() +  # Clean theme
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("imgs/daily_total_cases_with_trend.png", width = 10, height = 6)
#read in the COVID-19 data from the URL
library(tidyverse)
url = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv'
covid = read_csv(url)
head(covid, 5)
##Make a faceted line plot (geom_line) of the 6** states with most cases. Your X axis should be the date and the y axis cases.**
#step 1. Identify the six states with the most current cases (yesterdays assignment + dplyr::pull)
#step 2. Filter the raw data to those 6 states (hint: %in%)
#step 3. Set up a ggplot –> add layers –> add labels –> add a facet –> add a theme
#step4. save the image to you img directory (hint: ggsave())
top_6_states <- covid %>% #taking covid data and filtering for the max date
filter(date==max(date)) %>%
arrange(desc(cases)) %>% #arranging from most to least cases
slice_head(n = 6) %>% #showing the top 6 rows
pull(state) #pulling the state names from those rows
covid_data_filtered <- covid %>%   #taking data from the states that= the anmes of the 6 states
filter(state %in% top_6_states)
ggplot(covid_data_filtered, aes(x = date, y = cases, color = state)) +
geom_smooth(method = "loess", se = FALSE) +  # Adds a smooth trend line (loess method)
labs(title = "Trend of COVID-19 Cases in the Top 6 States",
x = "Date",
y = "Number of Cases") +
facet_wrap(~ state, scales = "free_y") +  # Facet by state, with free y-scales
theme_minimal() +  # Clean theme
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis
##Make a column plot (geom_col) of daily total cases in the USA. Your X axis should be the date and the y axis cases.
#We can break this task into 3 steps:
#1.Identify the total cases each day in the whole country (hint: group_by(date))
#2. Set up a ggplot –> add layers –> add labels –> add a theme
#3. Save the image to your img directory (hint: ggsave())
covid$date <- as.Date(covid$date)  #change the date format to make easier
# Group by date and calculate the total cases for each day
daily_total_cases <- covid %>%
group_by(date) %>%  # Group by date, allows to group cases by day
summarize(total_cases = sum(cases, na.rm = TRUE)) #This sums up the cases column for each date
ggplot(daily_total_cases, aes(x = date, y = total_cases)) +
geom_col(fill = "red",alpha=.5) +
geom_smooth(method = "loess", se = FALSE, color = "red", size = 1) +# Create the column plot with skyblue bars
labs(title = "Daily Total COVID-19 Cases in the USA",
x = "Date",
y = "Total Cases") +
theme_minimal() +  # Clean theme
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
ggsave("imgs/daily_total_cases_with_trend.png", width = 10, height = 6)
url= 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv'
covid = read_csv(url) #read in full COVID data
library(tidyverse)
covid = read_csv(url) #read in full COVID data
df=data.frame(region=state.region, #create new data frame using r objects
state=state.name,
abbrev.=state.abb)
covid_w_region <- merge(covid, df, by = "state", all.x = TRUE)
#compute the daily counts and cumulative totals for both cases and deaths.
#We will do this for each region.
library(dplyr)
covid_w_region <- covid_w_region %>%
arrange(state, date)
covid_w_region <- covid_w_region %>%
group_by(region, state) %>%
mutate(                                         #add new columns w/ calculations
daily_cases = cases - lag(cases, default = 0), #This gives the value of cases from the previous row (the previous day). If it's the first row (the first date), the default = 0 argument means that it will return 0 because there is no previous row.
daily_deaths = deaths - lag(deaths, default = 0),
cumulative_cases = cumsum(daily_cases),
cumulative_deaths = cumsum(daily_deaths)
) %>%
ungroup()
#To make the data suitable for plotting with ggplot2, we need to reshape it from a wide format (with separate columns for cases, deaths, etc.) to a long format.
library(tidyr)
covid_long <- covid_w_region %>%
pivot_longer(cols = c(daily_cases, daily_deaths, cumulative_cases, cumulative_deaths),
names_to = "metric", values_to = "value")
#The facet_wrap() function allows us to create a separate plot for each region.
library(ggplot2)
ggplot(covid_long, aes(x = as.Date(date), y = value, color = metric)) +
geom_line() +
facet_wrap(~ region, scales = "free_y") +
labs(
title = "Cumulative COVID-19 Cases & Deaths by Region",
x = "Date",
y = "Count",
color = "Metric"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major = element_line(color = "black")
)
View(covid_long)
View(covid_w_region)
filter<- covid_long %>%
filter(metric= "cumulative_cases" & "cumulative_deaths")
filter<- covid_long %>%
filter(metric== "cumulative_cases" & "cumulative_deaths")
filter<- covid_long %>%
filter(metric== "cumulative_cases", metric== "cumulative_deaths")
View(filter)
filter<- covid_long %>%
filter(metric== "cumulative_cases" & "cumulative_deaths")
covid_long <- covid_w_region %>%
pivot_longer(cols = c(cumulative_cases, cumulative_deaths),
names_to = "metric", values_to = "value")
ggplot(covid_long, aes(x = date, y = value, color = metric)) +
geom_line() +
facet_wrap(~ region, scales = "free_y") +
labs(
title = "Cumulative COVID-19 Cases & Deaths by Region",
x = "Date",
y = "Count",
color = "Metric"
) +
theme_minimal()
covid_deaths_data <- covid_w_region %>%
select(date, state, region, deaths, cumulative_deaths)
covid_deaths_data <- covid_w_region %>%
select(date, state, region, deaths, cumulative_cases)
View(covid_deaths_data)
covid_deaths_long <- covid_deaths_data %>%
pivot_longer(cols = c(deaths, cumulative_cases),
names_to = "metric",
values_to = "count")
View(covid_deaths_long)
ggplot(covid_deaths_long, aes(x = date, y = count, color = metric)) +
geom_line() +  # Line plot
facet_wrap(~ region, scales = "free_y") +  # Facet by region
labs(title = "COVID-19 Deaths and Cumulative Deaths by Region",
x = "Date",
y = "Count",
color = "Metric") +
theme_minimal() +  # Clean theme
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("covid_cases_deaths_by_region.png", width = 12, height = 8, dpi = 300)
ggsave(imgs/"covid_cases_deaths_by_region.png", width = 12, height = 8, dpi = 300)
ggsave("imgs/covid_cases_deaths_by_region.png", width = 12, height = 8, dpi = 300)
covid_w_region <- inner_join(df, covid, by= "state") #innerjoin (df1, df2, join by=)
View(covid_w_region)
covid_w_region <- inner_join(df, covid, by= "state")%>% #innerjoin (df1, df2, join by=)
group_by(region,date)
covid_w_region <- inner_join(df, covid, by= "state")%>% #innerjoin (df1, df2, join by=)
group_by(region,date)%>% #group by region for each date
summarize(cases = sum(cases),
deaths = sum(deaths))
covid_w_region <- inner_join(df, covid, by= "state")%>% #innerjoin (df1, df2, join by=)
group_by(region,date)%>% #group by region for each date
summarize(cases = sum(cases),
deaths = sum(deaths)) %>% #compute the daily counts and cumulative totals for both cases and deaths.
pivot_longer(cols= c(cases, deaths),
names_to= "type",
values_to = "count")
covid_w_region %>% #make facet grid when seeing realtionship b/w 2 variables.by region and date
ggplot(aes(x= date, y=count)) +
geom_line() +
facet_grid(type ~ region, scales="free_y") +
theme_bw()
covid_w_region %>% #make facet grid when seeing realtionship b/w 2 variables.by region and date
ggplot(aes(x= date, y= count)) +
geom_line()
covid_w_region %>% #make facet grid when seeing realtionship b/w 2 variables.by region and date
ggplot(aes(x= date, y= count)) +
geom_line() +
facet_grid(type~region, scales="free_y") +
theme_bw()
ggsave("covid_cases_deaths_by_region.png", width = 12, height = 8, dpi = 300)
airquality=airquality
?airquality
library(tidyverse)
install.packages("visdat")
library(visdat)
vis_dat(airquality)
vis_miss(airquality)
airquality1=airquality  #load air quality data from r.
airquality1<- airquality1 %>%
drop_na()
airquality1<- airquality1 %>%
drop_na()
View(airquality1)
airquality1=airquality
library(tidyverse)
install.packages("visdat")
library(visdat)
vis_dat(airquality1)
vis_miss(airquality1)
airquality1<- airquality1 %>% #remove na values
drop_na()
vis_miss(airquality1)
#formula for linear model lm(y ~ x, data= data set)
airquality_lm(Ozone ~ Solar.R, data= airquality1)
#formula for linear model lm(y ~ x, data= data set)
airquality_lm<- lm(Ozone ~ Solar.R, data= airquality1)
View(airquality_lm)
summary(airquality_lm)
plot(airquality_lm)
summary(airquality_lm) #shows statistic summary
summary(airquality_lm) #shows statistic summary
#formula for linear model lm(y ~ x, data= data set)
airquality_lm<- lm(Ozone ~ Temp, data= airquality1)
summary(airquality_lm) #shows statistic summary
plot(airquality_lm)
airquality1 %>% distinct()
summary(airquality_lm) #shows statistic summary
#formula for linear model lm(y ~ x, data= data set) Choosing temp, bc can see in the table as it goes up
airquality_lm<- lm(Ozone ~ Solar.R, data= airquality1)
summary(airquality_lm) #shows statistic summary
vis_cor(airquality_lm)
vis_cor(airquality1)
airquality1=airquality
library(tidyverse)
install.packages("visdat")
library(visdat)
vis_dat(airquality1)
vis_miss(airquality1)
airquality1<- airquality1 %>% #remove na values
drop_na()
vis_miss(airquality1)
airquality_lm<- lm(Ozone ~ Solar.R, data= airquality1)
summary(airquality_lm)
#Use broom::augment to predict the Ozone of the cleaned data
library(broom)
augmented_covid <- augment(airquality_lm, data = airquality1)
View(augmented_covid)
ggplot(augmented_covid, aes(x = .fitted, y = Ozone)) +
geom_point(color = "blue") +             # Actual vs predicted points
geom_abline(intercept = 0, slope = 1,   # Line y = x for comparison
color = "red", linetype = "dashed") +  # Reference line
labs(title = "Actual vs Predicted Ozone",
x = "Predicted Ozone",
y = "Actual Ozone") +
theme_minimal()
#Add a red line to show where the actual and predicted values are equal This can be done by plotting a 1:1 line (e.g. intercept 0, slope 1) with geom_abline(intercept = 0, slope = 1, color = "red")
#Add a subtitle to the plot showing the correlation between the actual and predicted values are equal This can be done by plotting a 1:1 line (e.g. intercept 0, slope 1) with
#paste("Correlation:", round(cor(a$Ozone, a$.fitted),2)) assuming your augmented data object is called a
correlation_value <- round(cor(augmented_covid$Ozone, augmented_covid$.fitted), 2)
ggplot(augmented_covid, aes(x = .fitted, y = Ozone)) +
geom_point(color = "blue") +             # Actual vs predicted points
geom_abline(intercept = 0, slope = 1,   # Line y = x for comparison
color = "red", linetype = "dashed") +  # Reference line
labs(title = "Actual vs Predicted Ozone",
subtitle = paste("Correlation:", correlation_value),
x = "Predicted Ozone",
y = "Actual Ozone") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("visdat")
library(visdat)
